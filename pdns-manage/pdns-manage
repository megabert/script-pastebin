#!/bin/bash

#
#	Manage DNS-Records with PowerDNS-API from command line
#
#

export SELF="$(basename $0)"

[ -d $HOME/.config 			] || mkdir $HOME/.config
[ -x $HOME/.config/pdns_api.conf 	] && . $HOME/.config/pdns_api.conf

pdns_api_port="${pdns_api_port:-8081}"
pdns_api_base="http://$pdns_api_host:$pdns_api_port/api/v1"
log_file="/tmp/pdns-manage.log"

# --- global variables     ---

all_zones=""
pdns_target_server=""

# --- global variables end ---

export pdns_api_base pdns_api_secret pdns_api_host all_zones pdns_target_server log_file

mylog()  { printf '%(%Y/%m/%d-%H:%M:%S)T %s\n' "-1" "$*" >>$log_file; }


fatal()  { mylog "${FUNCNAME[1]}: FATAL: $*"; echo "${FUNCNAME[1]}: FATAL: $*" >&2 ; exit 1; }
err()    { mylog "${FUNCNAME[1]}: ERROR: $*" ; }
warn()   { mylog "${FUNCNAME[1]}: WARN: $*"  ; }
info()   { mylog "${FUNCNAME[1]}: INFO: $*"  ; }
dbg()	 { mylog "${FUNCNAME[1]}: DEBUG: $*" ; }

my_init() {

	[ -n "$pdns_api_host" 	] 	|| fatal "variable \$pdns_api_host not set (set it in $HOME/.config/pdns_api.conf)"
	[ -n "$pdns_api_secret" ] 	|| fatal "variable \$pdns_api_secret ot set (set it in $HOME/.config/pdns_api.conf)"
	type jq   &>/dev/null 		|| fatal   "jq not installed. (apt-get install jq?)"
	type curl &>/dev/null 		|| fatal "curl not installed. (apt-get install curl?)"
	pdns_target_server="$(pdns_get_server)"
	[ -n $pdns_target_server ] || fatal "$pdns_api_base: API not responding"

}

get_json_error() {
	jq -r .error <<<"$*"
}

curl_request() {

	# execute an authenticated curl request at the powerdns api
	local  tmpfile=$(mktemp)
	local tmpfile2=$(mktemp)


        local method="$1"
	local uri="$2"
        local data="$3"

	[ -n "$method" ] || fatal "No method given" 
	[ -n "$uri"   ]  || fatal "No uri given" 

	if [ -n "$data" ] ; then
		info "REQUEST: curl --silent -w "%{http_code}" -X $method -H "X-API-Key: ***" --data "$data" $pdns_api_base$uri"
		curl --silent -w "%{http_code}" -X $method -H "X-API-Key: $pdns_api_secret" --data "$data" $pdns_api_base$uri >$tmpfile
	else
		info "REQUEST: curl --silent -w "%{http_code}" -X $method -H "X-API-Key: ***"  $pdns_api_base$uri"
		curl --silent -w "%{http_code}" -X $method -H "X-API-Key: $pdns_api_secret" $pdns_api_base$uri >$tmpfile
	fi
	status="$(tail -n1 $tmpfile)"
	status="${status: -3:3}"
	dbg "curl-request-result: $status"

	# remove 3-digit status code from last line of curl output
	tac $tmpfile | sed -re '1s/[0-9]{3}$//' | tac >$tmpfile2
	mv $tmpfile2 $tmpfile

	# remove 3-digit code from beginning of first line of curl output
	sed -r -i -e '1s/^000//' $tmpfile
	cat $tmpfile
	rm -f $tmpfile 

	if [ "${status:0:1}" != "2" ] ;then
		err "$(get_json_error "$output")"
		return 1
	fi
}

pdns_add_record() {

	# add a new record or overwrite an existing one

        local name="$1" 
        local content="$2"
        local rr_type="${3:-A}"
        local ttl="${4:-86400}"

	[ -n "$name"    ] || fatal "No record name given" 
	[ -n "$content" ] || fatal "No record content given" 

	local zone="$(pdns_get_zone_for_record $name)"
	
	[ -n "$zone" ] || { err "No zone found for record $name" ; return 1 ; }

	if pdns_is_multi_record "$name" "$rr_type" "$zone" ; then
		fatal "Records already exists with multiple values, aborting. use 'add_dup_record' to add a subrecord to it"
	fi

	# powerdns api wants txt-record-data enclosed within " " - do it with protecting additional quoting slashes
	[ "$rr_type" == "TXT" ] && content="\\\"$content\\\""

        local data="{\"rrsets\": [ { \"name\": \"$name\", \"type\": \"$rr_type\", \"ttl\": $ttl, \"changetype\": \"REPLACE\", \"records\": [ {\"content\": \"$content\", \"disabled\": false } ] } ] }"
	# beware! return value of curl_request is return value of function!
	local output="$(curl_request PATCH /servers/$pdns_target_server/zones/${zone} "$data")"
}

pdns_is_multi_record() {

	# check if there is more than one record with the same name (but different content)

	local name="$1"
	local rr_type="$2"
	local zone="$3"

        local zone_data="$(pdns_get_zone "$zone"|jq -r '.rrsets[] | select(.name=="'$name'" and .type=="'$rr_type'") | .records[].content' )"
	
	if [ "$(wc -l <<<"$zone_data")" -gt 1 ] ; then
		return 0
	fi
	return 1

}

pdns_add_dup_record() {

	# add a record with the same name as an existing one (mx, txt, srv, ..) but different value

	local name="$1"
	local content="$2"
	local rr_type="${3:-A}"
	local ttl="${4:-86400}"

	[ -n "$name"    ] || fatal "No record name given" 
	[ -n "$content" ] || fatal "No record content given" 

	local zone="$(pdns_get_zone_for_record $name)"
	[ -n "$zone" ] || { err "No zone found for record $name" ; return 1 ; }

	# powerdns api wants txt-record-data enclosed within " " - do it with protecting additional quoting slashes
	[ "$rr_type" == "TXT" ] && content="\\\"$content\\\""

	# fetch all existing records and execute a replace with the combined set of old and new records

        local data="{\"rrsets\": [ { \"name\": \"$name\", \"type\": \"$rr_type\", \"ttl\": $ttl, \"changetype\": \"REPLACE\", \"records\": [ {\"content\": \"$content\", \"disabled\": false } "
	local zone_data="$(pdns_get_zone "$zone"|jq -r '.rrsets[] | select(.name=="'$name'" and .type=="'$rr_type'") | .records[].content' )"
	while read existing_content;do 
		[ -n "$existing_content" ] && data="$data, {\"content\": \""${existing_content//\"/\\\"}"\", \"disabled\": false }"
	done <<<"$zone_data"
	data="$data ] } ] }"

	# beware! return value of curl_request is return value of function!
	local output="$(curl_request PATCH /servers/$pdns_target_server/zones/${zone} "$data")"
}

pdns_get_zones() {

	# get complete zone data as json for the whole server

	dbg "getting complete zone data(or using cache from global var)"
	[ -n "$all_zones" ] || all_zones="$(curl_request GET /servers/$pdns_target_server/zones | jq -r '.[]|.id')"
	dbg "zone data retrieve done"
	echo "$all_zones"
}

pdns_get_zone_for_record() {

	# get a zone name from a record name 

	# delete trailing dot from domain
	local record="${1%.}"
	local zone
	local zone_data
	dbg "trying to retrieve zone for record $record"

	local current_zone="$record"
	[ -n "$record"    ] || err "No record name given" 

	IFS_OLD="$IFS"
	IFS="."
	set $record
	IFS="$IFS_OLD"

	for part in $* ;do 
		dbg "$part"
		dbg "$current_zone"
		dbg "bla"
                zone_data="$(pdns_get_zones)"
                if zone="$(echo "$zone_data" | awk -v RES=1 "{ low=tolower(\$0); if(match(low,/^$current_zone/)) {print low;RES=0;exit;} ; } END{exit RES}")" ;then
                        echo "$zone"
                        return 0
                fi
		current_zone="${current_zone#$part.}"
	done
	return 1
}

pdns_delete_dup_record() {

	# delete a record from a record with multiple differnt subvalues 

        local name="$1" 
        local rr_type="${2}"
	local content="${3}"

	[ -n "$name"    ] || fatal "No record name given"
	[ -n "$rr_type" ] || fatal "No record type given" 
	[ -n "$content" ] || fatal "No record content given" 

	# todo handle txt approprietly
	[ "$rr_type" == "TXT" ] && content="\"$content\""

	local zone="$(pdns_get_zone_for_record $name)"
	[ -n "$zone" ] || { err "No zone found for record $name" ; return 1 ; }

	if ! pdns_is_multi_record "$name" "$rr_type" "$zone" ;then
		fatal "The record is not record with multiple subvalues, use delete_record instead"
	fi

	local zone_records="$(pdns_get_zone "$zone"|jq -r '.rrsets[] | select(.name=="'$name'" and .type=="'$rr_type'")' )"
	local ttl="$(jq -r .ttl <<<"$zone_records")"
        local data="{\"rrsets\": [ { \"name\": \"$name\", \"type\": \"$rr_type\", \"changetype\": \"REPLACE\", \"ttl\": $ttl, \"records\": [ "

	local record_contents="$(jq -r '.records[].content ' <<<"$zone_records")"
	local separator=""
	while read existing_content;do 
		if [ -n "$existing_content" ] ; then
			if [ "$existing_content" != "$content" ] ; then
				data="$data$separator {\"content\": \""${existing_content//\"/\\\"}"\", \"disabled\": false }"
				separator=", "
			fi
		fi
	done <<<"$record_contents"
	data="$data ] } ] }"
	
	# beware! return value of curl_request is return value of function!
	local output="$(curl_request PATCH /servers/$pdns_target_server/zones/${zone} "$data")"
}

pdns_delete_record() {

	# delete a normal single record 

        local name="$1" 
        local rr_type="${2}"
	local content="${3}"
	local force="${4:-0}"

	dbg "trying to delete record(name=$name,type=$rr_type,content=$content,force=$force)"

	[ -n "$name"    ] || fatal "No record name given"
	[ -n "$rr_type" ] || fatal "No record type given" 

	local zone="$(pdns_get_zone_for_record $name)"
	[ -n "$zone" ] || { err "No zone found for record $name" ; return 1 ; }

	if pdns_is_multi_record "$name" "$rr_type" "$zone" && [ $force == 0 ];then
		fatal "This records has multiple values. To delete only one value, use delete_dup_record, To delete all values, use delete_dup_records_all"
	fi

	local data="{\"rrsets\": [ { \"name\": \"$name\", \"type\": \"$rr_type\", \"changetype\": \"DELETE\" } ] }"

	# beware! return value of curl_request is return value of function!
	local output="$(curl_request PATCH /servers/$pdns_target_server/zones/${zone} "$data")"
}

pdns_delete_dup_records_all() {

	# delete all records of a given name and type
	# $1=record_name $2=record_type 

	pdns_delete_record "$1" "$2" "" "1"
}

pdns_zone_exists() {

	# check if a given zone exists within powerdns 

	local zone="$1"

	[ -n "$zone"    ] || fatal "No zone name given"

	local uri="/servers/$pdns_target_server/zones/${zone}"

	# beware! return value of curl_request is return value of function!
	curl_request GET /servers/$pdns_target_server/zones/${zone} 2>/dev/null | jq -r .id | fgrep -q "$zone" 
}

pdns_get_zone() {

	# get zone data for a given zone as json

	local zone="$1"

	[ -n "$zone"    ] || fatal "No zone name given"

	local uri="/servers/$pdns_target_server/zones/${zone}"

	# beware! return value of curl_request is return value of function!
	curl_request GET /servers/$pdns_target_server/zones/${zone} 
}

pdns_record_exists() {

	local record="$1"
	local rr_type="$2"

	[ -n "$record"  ] || fatal "No record name given"
	[ -n "$rr_type" ] || fatal "No record type given"

	local zone="$(pdns_get_zone_for_record $record)"
	[ -n "$zone" ] || { err "No zone found for record $name" ; return 1 ; }
	local found_record="$(pdns_get_zone "$zone"|jq -r '.rrsets[] | select(.name=="'$record'" and .type=="'$rr_type'")| .name ' )"
	[ "$found_record" == "$record" ]
}

pdns_get_server() { curl_request GET /servers | jq -r .[0].id ; }

pdns_flush_cache() { 
	local domain="$1"
	[ -n "$domain"  ] || fatal "No domain name given"
	local data="{\"domain\": \"$domain\" }"
	out="$(curl_request PUT "/servers/$pdns_target_server/cache/flush?domain=$domain")" 
	count="$(jq -r .count <<<"$out")"
	if jq -r .result <<<"$out"| fgrep -q "Flushed cache." ;then
		echo "Flushed $count entries from cache"
		return 0
	fi
	return 1
}

usage() {

echo
echo "$SELF: manage dns records via powerdns api"
echo
echo "$SELF <command> <parameter1> ..."
echo
echo "commands:"
echo
echo "add_record             <record> <content> <record_type> [ <ttl> ]"
echo 
echo "                       Add a normal record, an existing record will be replaced"                
echo
echo "delete_record          <record> <record_type>"
echo 
echo "                       Delete a normal record. If a record with multiple values(MX,NS,TXT) is found, "
echo "                       action will be aborted."
echo
echo "delete_dup_record      <record> <record_type> <content>"
echo
echo "                       Delete a subrecord of a set with the same name(MX,NS,TXT,...)"
echo
echo "delete_dup_records_all <record> <record_type>"
echo
echo "                       Delete all found subrecords of name 'record'"
echo
echo "add_dup_record         <record> <content> <record_type> [ <ttl> ]"
echo
echo "                       Add a record with a possibly already existing record name"
echo
echo "get_zone               <zone/domain-name>"
echo
echo "                       Get full json-data of the specified domain name"
echo
echo "domain_exists          <zone/domain-name>"
echo
echo "                       returns 0 if domain exists 1 if not"
echo 
echo "record_exists          <record> <record_type>"
echo
echo "                       returns 0 if record exists 1 if not"
echo
echo "flush_cache            <domain>"
echo 
echo "                       flush the dns cache of the primary authoritative server of the given domain"
echo

}

# --- start of program

my_init

case $1 in 
	add_record)
		record="$2"
		[[ -n "$record" && ! $record =~ \.$ ]] && record=$record.
		content="$3"
		rr_type="$4"
		ttl="$5"
		pdns_add_record "$record" "$content" "${rr_type^^}" "$ttl" 
		exit $?
		;;
	delete_record)
		record="$2"
		[[ -n "$record" && ! $record =~ \.$ ]] && record=$record.
		rr_type="$3"
		pdns_delete_record "$record" "${rr_type^^}" 
		exit $?
		;;
	delete_dup_record)
		record="$2"
		[[ -n "$record" && ! $record =~ \.$ ]] && record=$record.
		rr_type="$3"
		content="$4"
		pdns_delete_dup_record "$record" "${rr_type^^}" "$content"
		exit $?
		;;
	delete_dup_records_all)
		record="$2"
		[[ -n "$record" && ! $record =~ \.$ ]] && record=$record.
		rr_type="$3"
		pdns_delete_dup_records_all "$record" "${rr_type^^}" 
		exit $?
		;;
	add_dup_record)
		record="$2"
		[[ -n "$record" && ! $record =~ \.$ ]] && record=$record.
		content="$3"
		rr_type="$4"
		ttl="$5"
		pdns_add_dup_record "$record" "$content" "${rr_type^^}" "$ttl"
		exit $?
		;;
	get_zone)
		domain="$2"
		[[ -n "$domain" && ! $domain =~ \.$ ]] && domain=$domain.
		pdns_get_zone "$domain"
		exit $?
		;;
	domain_exists)
		domain="$2"
		[[ -n "$domain" && ! $domain =~ \.$ ]] && domain=$domain.
		pdns_zone_exists "$domain"
		exit $?
		;;
	record_exists)
		record="$2"
		[[ -n "$record" && ! $record =~ \.$ ]] && record=$record.
		rr_type="$3"
		pdns_record_exists "$record" "${rr_type^^}"
		exit $?
		;;
	flush_cache)
		domain="$2"
		[[ -n "$domain" && ! $domain =~ \.$ ]] && domain=$domain.
		pdns_flush_cache "$domain"
		exit $?
		;;
	--help|-h|-?) usage
	;;
	*) fatal "$SELF: $* wrong invocation"
esac

